<?php
class {{ ClassPrefix }}GeneratedSimpleObjectHydrator extends AbstractHydrator
{
    /**
     * @var ClassMetadata
     */
    private $class;

    /**
     * {@inheritdoc}
     */
    protected function hydrateAllData()
    {
        $result = array();
        $cache = array();

        while ($row = $this->_stmt->fetch(PDO::FETCH_ASSOC)) {
            $this->hydrateRowData($row, $cache, $result);
        }

        $this->_em->getUnitOfWork()->triggerEagerLoads();

        return $result;
    }

    /**
     * {@inheritdoc}
     */
    protected function prepare()
    {
        $this->class = $this->_em->getClassMetadata('{{ classMetadata.name }}');
    }

    /**
     * {@inheritdoc}
     */
    protected function hydrateRowData(array $sqlResult, array &$cache, array &$result)
    {
        $data       = array();

{% for columnName,fieldName in rsm.fieldMappings %}
        $data['{{ fieldName }}'] = Type::getType('{{ classMetadata.fieldMappings[fieldName]['type'] }}')->convertToPHPValue($sqlResult['{{ platform.getSQLResultCasing(columnName) }}']);
{% endfor %}

{% for column,mappingName in rsm.metaMappings %}
        $data['{{ mappingName }}'] = {% spaceless %}
            {% if rsm.typeMappings[column] is defined %}Type::getType('{{ rsm.typeMappings[column] }}')->convertToPHPValue({% endif %}$sqlResult['{{ platform.getSQLResultCasing(column) }}']{% if rsm.typeMappings[column] is defined %}){% endif %}
            ;{% endspaceless %}
{% endfor %}


        if (isset($this->_hints[Query::HINT_REFRESH_ENTITY])) {
            $this->registerManaged($this->class, $this->_hints[Query::HINT_REFRESH_ENTITY], $data);
        }

        $uow = $this->_em->getUnitOfWork();

{% if classMetadata.inheritanceType != constant('Doctrine\\ORM\\Mapping\\ClassMetadata::INHERITANCE_TYPE_NONE') %}
        // We need to find the correct entity class name if we have inheritance in resultset
        $discrColumnName = $this->_platform->getSQLResultCasing($this->class->discriminatorColumn['name']);

        if ( ! isset($sqlResult[$discrColumnName])) {
            throw HydrationException::missingDiscriminatorColumn($entityName, $discrColumnName, key($this->_rsm->aliasMap));
        }

        if ($sqlResult[$discrColumnName] === '') {
            throw HydrationException::emptyDiscriminatorValue(key($this->_rsm->aliasMap));
        }

        $entityName = $this->class->discriminatorMap[$sqlResult[$discrColumnName]];
        $entity = $uow->createEntity($entityName, $data, $this->_hints);
{% else %}
        $entity = $uow->createEntity('{{ classMetadata.name }}', $data, $this->_hints);
{% endif %}

        $result[] = $entity;
    }
}
